{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","ErrorBoundary.tsx","index.tsx"],"names":["AddItemForm","props","addItemHandler","useState","error","setError","newValue","setNewValue","hasError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","Button","variant","color","style","maxWidth","maxHeight","minWidth","minHeight","onClick","EditableSpan","title","onChangeHandler","editMode","setEditMode","titleValue","setTitleValue","type","autoFocus","onBlur","onDoubleClick","Todolist","todoId","tasks","deleteTask","changeFilter","createTask","changeTaskStatus","filter","removeTodolist","changeTaskTitle","changeTodoListTitle","newTitle","IconButton","Delete","map","t","key","id","isDone","checked","App","TodoListId_1","v1","TodoListId_2","todosData","setTodosData","setTasks","taskId","filteredTasks","newTask","foundTasks","newTasksData","todo","find","tl","foundTask","filteredTodo","newTodo","tasksForTodo","Boolean","window","location","hostname","match","ErrorBoundary","state","errorInfo","console","log","this","children","_","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8fafb4c9.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {Button} from \"@material-ui/core\";\n\n//types:\ntype AddItemFormPropTypes = {\n    addItemHandler: (title: string) => void\n}\n\nconst AddItemForm: React.FC<AddItemFormPropTypes> = (props)=>{\n    const {\n        addItemHandler,\n    } = props;\n\n    const [error, setError] = useState<boolean>(false);\n    const [newValue, setNewValue] = useState(\"\");\n    const hasError = error ? \"error\" : \"\";\n    const onchangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setNewValue(e.currentTarget?.value);\n    }\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        setError(false);\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    const addItem = () => {\n        if (!newValue.trim()) {\n            setError(true);\n            return;\n        }\n        addItemHandler(newValue.trim());\n        setNewValue('');\n    }\n\n    return (\n        <div>\n            <input value={newValue}\n                   onChange={onchangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   className={hasError}\n            />\n            {/*<button onClick={addItem}>+</button>*/}\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}\n                onClick={addItem}\n            >+</Button>\n            {error && <div className={\"error-message\"}>title is required</div>}\n        </div>\n    )\n}\n\nexport {\n    AddItemForm\n}","import React, {useState} from \"react\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeHandler: (newTitle: string) => void\n}\n\nconst EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\n    const {\n        title,\n        onChangeHandler,\n    } = props;\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [titleValue, setTitleValue] = useState(\"\");\n    const onEditMode = () => {\n        setEditMode(true);\n        setTitleValue(title);\n    }\n    const offEditMode = () => {\n        setEditMode(false);\n        onChangeHandler(titleValue);\n\n    }\n    const onTitleHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitleValue(e.currentTarget.value);\n    }\n\n    return (\n        <>\n            {\n                editMode\n                    ? <input\n                        type=\"text\"\n                        value={titleValue}\n                        autoFocus\n                        onBlur={offEditMode}\n                        onChange={onTitleHandler}\n                    />\n                    : <span\n                        onDoubleClick={onEditMode}\n                    >{title}</span>\n            }\n        </>\n    );\n}\n\nexport {\n    EditableSpan\n}","import React from \"react\";\nimport {FilterValuesType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\nexport type TaskType = {\n    title: string\n    isDone: boolean\n    id: string\n}\ntype TodolistPropsType = {\n    todoId: string\n    title: string\n    tasks: Array<TaskType>\n    deleteTask: (taskId: string, todoId: string) => void\n    changeFilter: (value: FilterValuesType, todoId: string) => void\n    createTask: (title: string, todoId: string) => void\n    changeTaskStatus: (taskId: string, isDone: boolean, todoId: string) => void\n    filter: FilterValuesType\n    removeTodolist: (todoId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todoId: string) => void\n    changeTodoListTitle: (todoId: string, newTitle: string) => void\n}\n\nconst Todolist: React.FC<TodolistPropsType> = (props) => {\n    const {\n        todoId,\n        title,\n        tasks,\n        deleteTask,\n        changeFilter,\n        createTask,\n        changeTaskStatus,\n        filter,\n        removeTodolist,\n        changeTaskTitle,\n        changeTodoListTitle,\n    } = props;\n\n    const removeTodo = () => {\n        removeTodolist(todoId);\n    }\n    const changeTodoTitle = (newTitle: string) => {\n        changeTodoListTitle(todoId, newTitle);\n    }\n    const onAllClickHandler = () => changeFilter(\"All\", todoId);\n    const onActiveClickHandler = () => changeFilter(\"Active\", todoId);\n    const onCompletedClickHandler = () => changeFilter(\"Completed\", todoId);\n    //fnc for adding task for todolist used todoId and addItemForm\n    const addTask = (title: string) => {\n        createTask(title, todoId); //todoId from props\n    }\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan onChangeHandler={changeTodoTitle} title={title}/>\n                {/*<button onClick={removeTodo}>X</button>*/}\n                <IconButton\n                    onClick={removeTodo}\n                ><Delete/></IconButton>\n            </h3>\n            <AddItemForm addItemHandler={addTask}/>\n            <ul>\n                {\n                    tasks.map(t => {\n                        const onRemoveHandler = () => {\n                            deleteTask(t.id, todoId);\n                        }\n                        const changeTaskStatusHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n                            //console.log(`change status ${t.id}`);\n                            //currentTarget set value its want to change:\n                            changeTaskStatus(t.id, e.currentTarget.checked, todoId);\n                        }\n                        const onChangeTaskTitleHandler = (newTitle: string) => {\n                            changeTaskTitle(t.id, newTitle, todoId)\n                        }\n                        //task:\n                        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\n                            <input type=\"checkbox\"\n                                   checked={t.isDone}\n                                   onChange={changeTaskStatusHandler}\n                            />\n                            {/*<span>{t.title}</span>*/}\n                            <EditableSpan title={t.title} onChangeHandler={onChangeTaskTitleHandler}/>\n                            {/*<button onClick={onRemoveHandler}>X</button>*/}\n                            <IconButton\n                                onClick={onRemoveHandler}\n                            ><Delete/></IconButton>\n                        </li>\n\n                    })\n                }\n            </ul>\n            <div>\n                {/*<button onClick={onAllClickHandler}\n                        className={filter === \"All\" ? \"active-filter\" : \"\"}\n                >All</button>\n                <button onClick={onActiveClickHandler}\n                        className={filter === \"Active\" ? \"active-filter\" : \"\"}\n                >Active</button>\n                <button onClick={onCompletedClickHandler}\n                        className={filter === \"Completed\" ? \"active-filter\" : \"\"}\n                >Completed</button>*/}\n                <button onClick={onAllClickHandler}\n                        className={filter === \"All\" ? \"active-filter\" : \"\"}\n                >All</button>\n                <button onClick={onActiveClickHandler}\n                        className={filter === \"Active\" ? \"active-filter\" : \"\"}\n                >Active</button>\n                <button onClick={onCompletedClickHandler}\n                        className={filter === \"Completed\" ? \"active-filter\" : \"\"}\n                >Completed</button>\n            </div>\n        </div>\n    );\n}\n\nexport {\n    Todolist\n}","import React, {useState} from 'react';\n\nimport './App.css';\n\nimport {v1} from \"uuid\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {Todolist, TaskType} from \"./TodoList\";\n\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\"\ntype TodolistType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\ntype TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n    const TodoListId_1 = v1();\n    const TodoListId_2 = v1();\n\n    const [todosData, setTodosData] = useState<Array<TodolistType>>([\n        {id: TodoListId_1, title: \"what to learn\", filter: \"All\" },\n        {id: TodoListId_2, title: \"what to bye\", filter: \"All\" },\n    ]);\n\n    const [tasks, setTasks] = useState<TasksStateType>({\n        [TodoListId_1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"React\", isDone: false},\n        ],\n        [TodoListId_2]: [\n            {id: v1(), title: \"Milk\", isDone: true},\n            {id: v1(), title: \"Bread\", isDone: true},\n            {id: v1(), title: \"Coffee\", isDone: false},\n        ],\n    });\n\n    //tasks callBacks:\n    const deleteTask = (taskId: string, todoId: string) => {\n        //find tasks used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId];\n        //remove task from all tasks:\n        let filteredTasks = foundTasks.filter(t => t.id !== taskId);\n        //rewrite new tasksData for todolist:\n        tasks[todoId] = filteredTasks;\n        //rerender all TasksData:\n        setTasks({...tasks});\n    };\n    const createTask = (title: string, todoId: string) => {\n        //create new task:\n        let newTask = {id: v1(), title, isDone: false};\n        //find tasks used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId];\n        //rewrite new tasksData for todolist:\n        let newTasksData = ([newTask, ...foundTasks]);\n        tasks[todoId] = newTasksData;\n        //rerender all TasksData:\n        setTasks( {newTasksData, ...tasks});\n    };\n    const changeFilter = (value: FilterValuesType, todoId: string) => {\n        //find todolist used todoId from onClickHandler:\n        let todo = todosData.find(tl=> tl.id === todoId);\n        //if todolist exists rewrite filter value and rerender all TodosData:\n        if(todo){\n            todo.filter = value;\n            setTodosData([...todosData]);\n        }\n    };\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoId: string) => {\n        //find taskS used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId]\n        //find TASK from foundTasks used taskId from onClickHandler:\n        let foundTask = foundTasks.find(t => t.id === taskId);\n        //if task exists rewrite isDone value and rerender all TasksData:\n        if (foundTask) {\n            foundTask.isDone = isDone;\n            setTasks({...tasks})\n        }\n    };\n    const changeTaskTitle = (taskId: string, newTitle: string, todoId: string) => {\n        //find taskS used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId];\n        //find TASK from foundTasks used taskId from onClickHandler:\n        let foundTask = foundTasks.find(t=> t.id === taskId);\n        //if task exists rewrite title value and rerender all TasksData:\n        if(foundTask){\n            foundTask.title = newTitle;\n            setTasks({...tasks})\n        }\n    }\n\n\n    //todoLists callBacks:\n    const removeTodolist = (todoId: string) => {\n        //remove todolist used todoId:\n        let filteredTodo = todosData.filter(tl => tl.id !== todoId);\n        //rewrite all todoData and delete taskData of this todolist:\n        setTodosData(filteredTodo);\n        delete tasks[todoId];\n        //rerender all tasksData:\n        setTasks({...tasks});\n    }\n    const createTodolist = (title: string) => {\n        //create new todolist:\n        let newTodo: TodolistType = {id: v1(), title, filter: \"All\"};\n        //rerender all todoData with new todolist:\n        setTodosData([newTodo,...todosData]);\n        //rerender all todoData with new tasks of this todolist:\n        setTasks({\n            ...tasks,\n            [newTodo.id]: []\n        });\n    }\n    const changeTodoListTitle = (todoId: string, newTitle: string) => {\n        //found todolist used todoId:\n        let filteredTodo = todosData.find(t=> t.id === todoId);\n        //filteredTodo = isUndefined, if todolist exist rewrite title and rerender all todosData:\n        if (filteredTodo) {\n            filteredTodo.title = newTitle;\n            setTodosData([...todosData]);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <AddItemForm addItemHandler={createTodolist}/>\n            {\n                todosData.map((tl) => {\n\n                    //filtered tasks for todolist:\n\n                    /*let tasksForTodo = tasks[tl.id];\n                    if (tl.filter === \"Active\") {\n                        tasksForTodo = tasks[tl.id].filter(t => !t.isDone);\n                    }\n                    if (tl.filter === \"Completed\") {\n                        tasksForTodo = tasks[tl.id].filter(t => t.isDone);\n                    }*/\n\n\n                    let tasksForTodo = (): Array<TaskType> => {\n                        switch (tl.filter) {\n                            case \"Active\": {\n                                return tasks[tl.id].filter(t => t.isDone);\n                            }\n                            case \"Completed\": {\n                                return tasks[tl.id].filter(t => !t.isDone);\n                            }\n                            default:\n                                return tasks[tl.id];\n                        }\n                    }\n\n                    return (\n                        <Todolist\n                            key={tl.id}\n                            todoId={tl.id}\n                            title={tl.title}\n                            tasks={tasksForTodo()}\n                            deleteTask={deleteTask}\n                            changeFilter={changeFilter}\n                            createTask={createTask}\n                            changeTaskStatus={changeTaskStatus}\n                            filter={tl.filter}\n                            removeTodolist={removeTodolist}\n                            changeTaskTitle={changeTaskTitle}\n                            changeTodoListTitle={changeTodoListTitle}\n                        />\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n    children?: ReactNode;\n}\n\ninterface State {\n    hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n    public state: State = {\n        hasError: false\n    };\n\n    //catch errors anywhere in child component tree:\n    public static getDerivedStateFromError(_: Error): State {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    //show errors info:\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        console.log(\" Logging to external log service ...\", error, errorInfo);\n    }\n\n    public render() {\n        return this.state.hasError\n            ? <h1>Something went wrong</h1>\n            : this.props.children\n    }\n}\n\nexport {\n    ErrorBoundary\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ErrorBoundary } from './ErrorBoundary';\n\n\n\nReactDOM.render(\n    //@ts-ignore\n    <ErrorBoundary>\n        <App />\n    </ErrorBoundary>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}