{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","ErrorBoundary.tsx","index.tsx"],"names":["AddItemForm","props","addItemHandler","useState","error","setError","newValue","setNewValue","hasError","addItem","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","EditableSpan","title","onChangeHandler","editMode","setEditMode","titleValue","setTitleValue","type","autoFocus","onBlur","onDoubleClick","Todolist","todoId","tasks","deleteTask","changeFilter","createTask","changeTaskStatus","filter","removeTodolist","changeTaskTitle","changeTodoListTitle","newTitle","map","t","key","id","isDone","checked","App","TodoListId_1","v1","TodoListId_2","todosData","setTodosData","setTasks","taskId","filteredTasks","newTask","foundTasks","newTasksData","todo","find","tl","foundTask","filteredTodo","newTodo","tasksForTodo","Boolean","window","location","hostname","match","ErrorBoundary","state","errorInfo","console","log","this","children","_","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dda99b93.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\n//types:\r\ntype AddItemFormPropTypes = {\r\n    addItemHandler: (title: string) => void\r\n}\r\n\r\nconst AddItemForm: React.FC<AddItemFormPropTypes> = (props)=>{\r\n    const {\r\n        addItemHandler,\r\n    } = props;\r\n\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [newValue, setNewValue] = useState(\"\");\r\n    const hasError = error ? \"error\" : \"\";\r\n    const onchangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setNewValue(e.currentTarget?.value);\r\n    }\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        if (!newValue.trim()) {\r\n            setError(true);\r\n            return;\r\n        }\r\n        addItemHandler(newValue.trim());\r\n        setNewValue('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <input value={newValue}\r\n                   onChange={onchangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={hasError}\r\n            />\r\n            <button onClick={addItem}>+</button>\r\n            {error && <div className={\"error-message\"}>title is required</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    AddItemForm\r\n}","import React, {useState} from \"react\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChangeHandler: (newTitle: string) => void\r\n}\r\n\r\nconst EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\r\n    const {\r\n        title,\r\n        onChangeHandler,\r\n    } = props;\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [titleValue, setTitleValue] = useState(\"\");\r\n    const onEditMode = () => {\r\n        setEditMode(true);\r\n        setTitleValue(title);\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        onChangeHandler(titleValue);\r\n\r\n    }\r\n    const onTitleHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitleValue(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                editMode\r\n                    ? <input\r\n                        type=\"text\"\r\n                        value={titleValue}\r\n                        autoFocus\r\n                        onBlur={offEditMode}\r\n                        onChange={onTitleHandler}\r\n                    />\r\n                    : <span\r\n                        onDoubleClick={onEditMode}\r\n                    >{title}</span>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport {\r\n    EditableSpan\r\n}","import React from \"react\";\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    title: string\r\n    isDone: boolean\r\n    id: string\r\n}\r\ntype TodolistPropsType = {\r\n    todoId: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    deleteTask: (taskId: string, todoId: string) => void\r\n    changeFilter: (value: FilterValuesType, todoId: string) => void\r\n    createTask: (title: string, todoId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todoId: string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todoId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todoId: string) => void\r\n    changeTodoListTitle: (todoId: string, newTitle: string) => void\r\n}\r\n\r\nconst Todolist: React.FC<TodolistPropsType> = (props) => {\r\n    const {\r\n        todoId,\r\n        title,\r\n        tasks,\r\n        deleteTask,\r\n        changeFilter,\r\n        createTask,\r\n        changeTaskStatus,\r\n        filter,\r\n        removeTodolist,\r\n        changeTaskTitle,\r\n        changeTodoListTitle,\r\n    } = props;\r\n\r\n    const removeTodo = () => {\r\n        removeTodolist(todoId);\r\n    }\r\n    const changeTodoTitle = (newTitle: string) => {\r\n        changeTodoListTitle(todoId, newTitle);\r\n    }\r\n    const onAllClickHandler = () => changeFilter(\"All\", todoId);\r\n    const onActiveClickHandler = () => changeFilter(\"Active\", todoId);\r\n    const onCompletedClickHandler = () => changeFilter(\"Completed\", todoId);\r\n    //fnc for adding task for todolist used todoId and addItemForm\r\n    const addTask = (title: string) => {\r\n        createTask(title, todoId); //todoId from props\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan onChangeHandler={changeTodoTitle} title={title}/>\r\n                <button onClick={removeTodo}>X</button>\r\n            </h3>\r\n            <AddItemForm addItemHandler={addTask}/>\r\n            <ul>\r\n                {\r\n                    tasks.map(t => {\r\n                        const onRemoveHandler = () => {\r\n                            deleteTask(t.id, todoId);\r\n                        }\r\n                        const changeTaskStatusHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n                            //console.log(`change status ${t.id}`);\r\n                            //currentTarget set value its want to change:\r\n                            changeTaskStatus(t.id, e.currentTarget.checked, todoId);\r\n                        }\r\n                        const onChangeTaskTitleHandler = (newTitle: string) => {\r\n                            changeTaskTitle(t.id, newTitle, todoId)\r\n                        }\r\n                        //task:\r\n                        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <input type=\"checkbox\"\r\n                                   checked={t.isDone}\r\n                                   onChange={changeTaskStatusHandler}\r\n                            />\r\n                            {/*<span>{t.title}</span>*/}\r\n                            <EditableSpan title={t.title} onChangeHandler={onChangeTaskTitleHandler}/>\r\n                            <button onClick={onRemoveHandler}>X</button>\r\n                        </li>\r\n\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button onClick={onAllClickHandler}\r\n                        className={filter === \"All\" ? \"active-filter\" : \"\"}\r\n                >All</button>\r\n                <button onClick={onActiveClickHandler}\r\n                        className={filter === \"Active\" ? \"active-filter\" : \"\"}\r\n                >Active</button>\r\n                <button onClick={onCompletedClickHandler}\r\n                        className={filter === \"Completed\" ? \"active-filter\" : \"\"}\r\n                >Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {\r\n    Todolist\r\n}","import React, {useState} from 'react';\r\n\r\nimport './App.css';\r\nimport {Todolist, TaskType} from \"./Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\"\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    const TodoListId_1 = v1();\r\n    const TodoListId_2 = v1();\r\n\r\n    const [todosData, setTodosData] = useState<Array<TodolistType>>([\r\n        {id: TodoListId_1, title: \"what to learn\", filter: \"All\" },\r\n        {id: TodoListId_2, title: \"what to bye\", filter: \"All\" },\r\n    ]);\r\n\r\n    const [tasks, setTasks] = useState<TasksStateType>({\r\n        [TodoListId_1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"React\", isDone: false},\r\n        ],\r\n        [TodoListId_2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: true},\r\n            {id: v1(), title: \"Coffee\", isDone: false},\r\n        ],\r\n    });\r\n\r\n    //tasks callBacks:\r\n    const deleteTask = (taskId: string, todoId: string) => {\r\n        //find tasks used TodoId from onClickHandler:\r\n        let foundTasks = tasks[todoId];\r\n        //remove task from all tasks:\r\n        let filteredTasks = foundTasks.filter(t => t.id !== taskId);\r\n        //rewrite new tasksData for todolist:\r\n        tasks[todoId] = filteredTasks;\r\n        //rerender all TasksData:\r\n        setTasks({...tasks});\r\n    };\r\n    const createTask = (title: string, todoId: string) => {\r\n        //create new task:\r\n        let newTask = {id: v1(), title, isDone: false};\r\n        //find tasks used TodoId from onClickHandler:\r\n        let foundTasks = tasks[todoId];\r\n        //rewrite new tasksData for todolist:\r\n        let newTasksData = ([newTask, ...foundTasks]);\r\n        tasks[todoId] = newTasksData;\r\n        //rerender all TasksData:\r\n        setTasks( {newTasksData, ...tasks});\r\n    };\r\n    const changeFilter = (value: FilterValuesType, todoId: string) => {\r\n        //find todolist used todoId from onClickHandler:\r\n        let todo = todosData.find(tl=> tl.id === todoId);\r\n        //if todolist exists rewrite filter value and rerender all TodosData:\r\n        if(todo){\r\n            todo.filter = value;\r\n            setTodosData([...todosData]);\r\n        }\r\n    };\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoId: string) => {\r\n        //find taskS used TodoId from onClickHandler:\r\n        let foundTasks = tasks[todoId]\r\n        //find TASK from foundTasks used taskId from onClickHandler:\r\n        let foundTask = foundTasks.find(t => t.id === taskId);\r\n        //if task exists rewrite isDone value and rerender all TasksData:\r\n        if (foundTask) {\r\n            foundTask.isDone = isDone;\r\n            setTasks({...tasks})\r\n        }\r\n    };\r\n    const changeTaskTitle = (taskId: string, newTitle: string, todoId: string) => {\r\n        //find taskS used TodoId from onClickHandler:\r\n        let foundTasks = tasks[todoId];\r\n        //find TASK from foundTasks used taskId from onClickHandler:\r\n        let foundTask = foundTasks.find(t=> t.id === taskId);\r\n        //if task exists rewrite title value and rerender all TasksData:\r\n        if(foundTask){\r\n            foundTask.title = newTitle;\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n\r\n    //todoLists callBacks:\r\n    const removeTodolist = (todoId: string) => {\r\n        //remove todolist used todoId:\r\n        let filteredTodo = todosData.filter(tl => tl.id !== todoId);\r\n        //rewrite all todoData and delete taskData of this todolist:\r\n        setTodosData(filteredTodo);\r\n        delete tasks[todoId];\r\n        //rerender all tasksData:\r\n        setTasks({...tasks});\r\n    }\r\n    const createTodolist = (title: string) => {\r\n        //create new todolist:\r\n        let newTodo: TodolistType = {id: v1(), title, filter: \"All\"};\r\n        //rerender all todoData with new todolist:\r\n        setTodosData([newTodo,...todosData]);\r\n        //rerender all todoData with new tasks of this todolist:\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodo.id]: []\r\n        });\r\n    }\r\n    const changeTodoListTitle = (todoId: string, newTitle: string) => {\r\n        //found todolist used todoId:\r\n        let filteredTodo = todosData.find(t=> t.id === todoId);\r\n        //filteredTodo = isUndefined, if todolist exist rewrite title and rerender all todosData:\r\n        if (filteredTodo) {\r\n            filteredTodo.title = newTitle;\r\n            setTodosData([...todosData]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItemHandler={createTodolist}/>\r\n            {\r\n                todosData.map((tl) => {\r\n\r\n                    //filtered tasks for todolist:\r\n\r\n                    /*let tasksForTodo = tasks[tl.id];\r\n                    if (tl.filter === \"Active\") {\r\n                        tasksForTodo = tasks[tl.id].filter(t => !t.isDone);\r\n                    }\r\n                    if (tl.filter === \"Completed\") {\r\n                        tasksForTodo = tasks[tl.id].filter(t => t.isDone);\r\n                    }*/\r\n\r\n\r\n                    let tasksForTodo = (): Array<TaskType> => {\r\n                        switch (tl.filter) {\r\n                            case \"Active\": {\r\n                                return tasks[tl.id].filter(t => t.isDone);\r\n                            }\r\n                            case \"Completed\": {\r\n                                return tasks[tl.id].filter(t => !t.isDone);\r\n                            }\r\n                            default:\r\n                                return tasks[tl.id];\r\n                        }\r\n                    }\r\n\r\n                    return (\r\n                        <Todolist\r\n                            key={tl.id}\r\n                            todoId={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodo()}\r\n                            deleteTask={deleteTask}\r\n                            changeFilter={changeFilter}\r\n                            createTask={createTask}\r\n                            changeTaskStatus={changeTaskStatus}\r\n                            filter={tl.filter}\r\n                            removeTodolist={removeTodolist}\r\n                            changeTaskTitle={changeTaskTitle}\r\n                            changeTodoListTitle={changeTodoListTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component, ErrorInfo, ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n    children?: ReactNode;\r\n}\r\n\r\ninterface State {\r\n    hasError: boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n    public state: State = {\r\n        hasError: false\r\n    };\r\n\r\n    //catch errors anywhere in child component tree:\r\n    public static getDerivedStateFromError(_: Error): State {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    //show errors info:\r\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n        console.log(\" Logging to external log service ...\", error, errorInfo);\r\n    }\r\n\r\n    public render() {\r\n        return this.state.hasError\r\n            ? <h1>Something went wrong</h1>\r\n            : this.props.children\r\n    }\r\n}\r\n\r\nexport {\r\n    ErrorBoundary\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ErrorBoundary } from './ErrorBoundary';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    //@ts-ignore\r\n    <ErrorBoundary>\r\n        <App />\r\n    </ErrorBoundary>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}