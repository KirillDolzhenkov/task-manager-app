{"version":3,"sources":["serviceWorker.ts","ErrorBoundary.tsx","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","state/todolistsReducer.ts","state/tasksReducer.ts","AppWithReducers.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","props","children","_","Component","AddItemForm","addItemHandler","useState","setError","newValue","setNewValue","addItem","trim","TextField","variant","value","label","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","color","style","maxWidth","maxHeight","minWidth","minHeight","onClick","AddBox","EditableSpan","title","onChangeHandler","editMode","setEditMode","titleValue","setTitleValue","type","autoFocus","onBlur","onDoubleClick","Todolist","todoId","tasks","deleteTask","changeFilter","createTask","changeTaskStatus","filter","removeTodolist","changeTaskTitle","changeTodoListTitle","newTitle","Delete","map","t","key","id","className","isDone","Checkbox","checked","Button","todolistsReducer","action","tl","stateCopy","tasksReducer","taskId","newTask","v1","foundTask","find","App","TodoListId_1","TodoListId_2","useReducer","todosData","dispatchTodo","dispatchTasks","removeTaskAC","addTaskAC","changeTodoFilterAC","changeTaskStatusAC","changeTaskTitleAC","removeTodolistAC","changeTodoTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","addTodoAC","spacing","todoList","getTasksForRender","ReactDOM","render","AppWithReducers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"oPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCRAC,E,4MACKC,MAAe,CAClBC,UAAU,G,uDAUd,SAAkBC,EAAcC,GAC5BC,QAAQC,IAAI,uCAAwCH,EAAOC,K,oBAG/D,WACI,OAAOG,KAAKN,MAAMC,SACZ,oDACAK,KAAKC,MAAMC,Y,uCAbrB,SAAuCC,GAEnC,MAAO,CAAER,UAAU,O,GARCS,a,kHCDtBC,EAA8C,SAACJ,GACjD,IACIK,EACAL,EADAK,eAGJ,EAA0BC,oBAAkB,GAA5C,mBAAOX,EAAP,KAAcY,EAAd,KACA,EAAgCD,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KAEMf,EAAWC,EAAQ,oBAAsB,GAWzCe,EAAU,WACPF,EAASG,QAIdN,EAAeG,EAASG,QACxBF,EAAY,KAJRF,GAAS,IAOjB,OACI,6BAMI,kBAACK,EAAA,EAAD,CACIC,QAAQ,WACRC,MAAON,EACPO,MAAM,QACNC,SA9BY,SAACC,GAA4C,IAAD,EAChER,EAAW,UAACQ,EAAEC,qBAAH,aAAC,EAAiBJ,QA8BrBK,WA5Bc,SAACF,GACvBV,GAAS,GACU,KAAfU,EAAEG,UACFV,KA0BIf,QAASD,EACT2B,WAAY3B,IAGhB,kBAAC4B,EAAA,EAAD,CACIC,MAAM,UACNC,MAAO,CAACC,SAAU,OAAQC,UAAW,OAAQC,SAAU,OAAQC,UAAW,QAC1EC,QAASnB,GACZ,kBAACoB,EAAA,EAAD,SClDPC,EAAgD,SAAC/B,GACnD,IACIgC,EAEAhC,EAFAgC,MACAC,EACAjC,EADAiC,gBAEJ,EAAgC3B,oBAAkB,GAAlD,mBAAO4B,EAAP,KAAiBC,EAAjB,KACA,EAAoC7B,mBAAS,IAA7C,mBAAO8B,EAAP,KAAmBC,EAAnB,KAcA,OACI,oCAEQH,EAQI,kBAACtB,EAAA,EAAD,CACI0B,KAAK,OACLxB,MAAOsB,EACPG,WAAS,EACTC,OAxBA,WAChBL,GAAY,GACZF,EAAgBG,IAuBApB,SApBG,SAACC,GACpBoB,EAAcpB,EAAEC,cAAcJ,UAqBhB,0BACE2B,cAhCD,WACfN,GAAY,GACZE,EAAcL,KA+BAA,K,kBCtBhBU,EAAwC,SAAC1C,GAC3C,IACI2C,EAWA3C,EAXA2C,OACAX,EAUAhC,EAVAgC,MACAY,EASA5C,EATA4C,MACAC,EAQA7C,EARA6C,WACAC,EAOA9C,EAPA8C,aACAC,EAMA/C,EANA+C,WACAC,EAKAhD,EALAgD,iBACAC,EAIAjD,EAJAiD,OACAC,EAGAlD,EAHAkD,eACAC,EAEAnD,EAFAmD,gBACAC,EACApD,EADAoD,oBAiBJ,OACI,6BACI,4BACI,kBAAC,EAAD,CAAcnB,gBAdF,SAACoB,GACrBD,EAAoBT,EAAQU,IAa4BrB,MAAOA,IAEvD,kBAACV,EAAA,EAAD,CACIO,QApBG,WACfqB,EAAeP,KAoBN,kBAACW,EAAA,EAAD,QAEL,kBAAC,EAAD,CAAajD,eAbL,SAAC2B,GACbe,EAAWf,EAAOW,MAad,4BAEQC,EAAMW,KAAI,SAAAC,GAaN,OAAO,yBAAKC,IAAKD,EAAEE,GAAIC,UAAWH,EAAEI,OAAS,UAAY,IAKrD,kBAACC,EAAA,EAAD,CACItC,MAAM,YACNuC,QAASN,EAAEI,OACX5C,SAjBwB,SAACC,GAG7B+B,EAAiBQ,EAAEE,GAAIzC,EAAEC,cAAc4C,QAASnB,MAiBhD,kBAAC,EAAD,CAAcX,MAAOwB,EAAExB,MAAOC,gBAfD,SAACoB,GAC9BF,EAAgBK,EAAEE,GAAIL,EAAUV,MAgBhC,kBAACrB,EAAA,EAAD,CACIO,QA1BgB,WACpBgB,EAAWW,EAAEE,GAAIf,KA0BhB,kBAACW,EAAA,EAAD,YAMjB,6BAWI,kBAACS,EAAA,EAAD,CACIxC,MAAM,UACNM,QAnEU,kBAAMiB,EAAa,MAAOH,IAoEpC9B,QAAoB,QAAXoC,EAAmB,YAAc,QAH9C,OAKA,kBAACc,EAAA,EAAD,CACIxC,MAAM,UACNM,QAvEa,kBAAMiB,EAAa,SAAUH,IAwE1C9B,QAAoB,WAAXoC,EAAsB,YAAc,QAHjD,UAKA,kBAACc,EAAA,EAAD,CACIxC,MAAM,YACNM,QA3EgB,kBAAMiB,EAAa,YAAaH,IA4EhD9B,QAAoB,cAAXoC,EAAyB,YAAc,QAHpD,gB,yBC/GHe,EAAmB,SAACvE,EAAiCwE,GAC9D,OAAQA,EAAO3B,MACX,IAAK,8BAED,OADa,YAAO7C,GACHwD,QAAO,SAAAiB,GAAE,OAAIA,EAAGR,KAAOO,EAAOtB,UAEnD,IAAK,2BACD,IAAIwB,EAAS,YAAO1E,GACpB,MAAM,CAAE,CAACiE,GAAIO,EAAOtB,OAAQX,MAAOiC,EAAOjC,MAAOiB,OAAQ,QAAzD,mBAAoEkB,IAExE,IAAK,iCACD,OAAO1E,EAAM8D,KAAI,SAAAW,GAAE,OAAIA,EAAGR,KAAOO,EAAOtB,OAASuB,EAA1B,2BAAmCA,GAAnC,IAAuCjB,OAAQgB,EAAOhB,YAEjF,IAAK,gCACD,OAAOxD,EAAM8D,KAAI,SAAAW,GAAE,OAAGA,EAAGR,KAAOO,EAAOtB,OAASuB,EAA1B,2BAAmCA,GAAnC,IAAuClC,MAAOiC,EAAOjC,WAE/E,QACI,OAAOvC,IChBN2E,EAAe,SAAC3E,EAAuBwE,GAChD,OAAQA,EAAO3B,MACX,IAAK,uBAMD,OAAO,2BACA7C,GADP,kBAEKwE,EAAOtB,OAASlD,EAAMwE,EAAOtB,QAAQM,QAAO,SAAAO,GAAC,OAAIA,EAAEE,KAAOO,EAAOI,YAG1E,IAAK,oBACD,IAAMC,EAAoB,CAACZ,GAAIa,cAAMvC,MAAOiC,EAAOjC,MAAO4B,QAAQ,GAMlE,OAAO,2BACAnE,GADP,kBAEKwE,EAAOtB,OAFZ,CAEsB2B,GAFtB,mBAEkC7E,EAAMwE,EAAOtB,YAGnD,IAAK,8BACD,IAAMwB,EAAS,eAAO1E,GAEhB+E,EADaL,EAAUF,EAAOtB,QACP8B,MAAK,SAAAjB,GAAC,OAAIA,EAAEE,KAAOO,EAAOI,UAIvD,OAHIG,IACAA,EAAUZ,OAASK,EAAOL,QAEvBO,EAEX,IAAK,8BACD,IAAMA,EAAS,eAAO1E,GAEhB+E,EADaL,EAAUF,EAAOtB,QACP8B,MAAK,SAAAjB,GAAC,OAAIA,EAAEE,KAAOO,EAAOI,UAIvD,OAHIG,IACAA,EAAUxC,MAAQiC,EAAOjC,OAEtBmC,EAEX,IAAK,2BAID,OAAO,2BACA1E,GADP,kBAGKwE,EAAOtB,OAAS,KAIzB,IAAK,8BACD,IAAMwB,EAAS,eAAO1E,GAEtB,cADO0E,EAAUF,EAAOtB,QACjBwB,EAEX,QACI,OAAO1E,ICwLJiF,MAzNf,WAAgB,IAAD,EACLC,EAAeJ,cACfK,EAAeL,cAErB,EAAkCM,qBAAWb,EAAkB,CAC3D,CAACN,GAAIiB,EAAc3C,MAAO,gBAAiBiB,OAAQ,OACnD,CAACS,GAAIkB,EAAc5C,MAAO,cAAeiB,OAAQ,SAFrD,mBAAO6B,EAAP,KAAkBC,EAAlB,KAKA,EAA+BF,qBAAWT,GAAD,mBACpCO,EAAe,CACZ,CAACjB,GAAIa,cAAMvC,MAAO,WAAY4B,QAAQ,GACtC,CAACF,GAAIa,cAAMvC,MAAO,KAAM4B,QAAQ,GAChC,CAACF,GAAIa,cAAMvC,MAAO,QAAS4B,QAAQ,KAJF,cAMpCgB,EAAe,CACZ,CAAClB,GAAIa,cAAMvC,MAAO,OAAQ4B,QAAQ,GAClC,CAACF,GAAIa,cAAMvC,MAAO,QAAS4B,QAAQ,GACnC,CAACF,GAAIa,cAAMvC,MAAO,SAAU4B,QAAQ,KATH,IAAzC,mBAAOhB,EAAP,KAAcoC,EAAd,KAcMnC,EAAa,SAACwB,EAAgB1B,GAShC,IAAMsB,EDKc,SAACI,EAAgB1B,GACzC,MAAO,CAACL,KAAM,uBAAwB+B,SAAQ1B,UCN3BsC,CAAaZ,EAAQ1B,GACpCqC,EAAcf,IAEZlB,EAAa,SAACf,EAAeW,GAU/B,IAAMsB,EDLW,SAACjC,EAAeW,GACrC,MAAO,CAACL,KAAM,oBAAqBN,QAAOW,UCIvBuC,CAAUlD,EAAOW,GAChCqC,EAAcf,IAEZnB,EAAe,SAAChC,EAAyB6B,GAQ3C,IAAMsB,EFzDoB,SAACtB,EAAgBM,GAC/C,MAAO,CAACX,KAAM,iCAAkCK,SAAQM,UEwDrCkC,CAAmBxC,EAAQ7B,GAC1CiE,EAAad,IAEXjB,EAAmB,SAACqB,EAAgBT,EAAiBjB,GAUvD,IAAMsB,ED1BoB,SAACI,EAAgBT,EAAiBjB,GAChE,MAAO,CAACL,KAAM,8BAA+B+B,SAAQT,SAAQjB,UCyB1CyC,CAAmBf,EAAQT,EAAQjB,GAClDqC,EAAcf,IAEZd,EAAkB,SAACkB,EAAgBhB,EAAkBV,GAUvD,IAAMsB,EDpCmB,SAACI,EAAgBrC,EAAeW,GAC7D,MAAO,CAACL,KAAM,8BAA+B+B,SAAQrC,QAAOW,UCmCzC0C,CAAkBhB,EAAQhB,EAAUV,GACnDqC,EAAcf,IAKZf,EAAiB,SAACP,GAQpB,IAAMsB,EFvGkB,SAACtB,GAC7B,MAAO,CAACL,KAAM,8BAA+BK,UEsG1B2C,CAAiB3C,GAChCqC,EAAcf,GACdc,EAAad,IAgBXb,EAAsB,SAACT,EAAgBU,GAQzC,IAAMY,EFxHmB,SAACtB,EAAgBX,GAC9C,MAAO,CAACM,KAAM,gCAAiCK,SAAQX,SEuHpCuD,CAAkBlC,EAAUV,GAC3CoC,EAAad,IAGjB,OACI,yBAAKN,UAAU,OAEX,kBAAC6B,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACpE,EAAA,EAAD,CACIqE,KAAK,QACLpE,MAAM,UACNqE,aAAW,QACX,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYjF,QAAQ,MAApB,YAGA,kBAACkD,EAAA,EAAD,CAAQxC,MAAM,WAAd,WAGR,kBAACwE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAC1E,MAAO,CAAC2E,QAAS,SAE7B,kBAAC,EAAD,CAAa9F,eA9CN,SAAC2B,GAUpB,IAAMiC,EFlHW,SAACjC,GACtB,MAAO,CAACM,KAAM,2BAA4BN,QAAOW,OAAQ4B,eEiHtC6B,CAAUpE,GACzBgD,EAAcf,GACdc,EAAad,OAoCL,kBAACgC,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,GAGjBvB,EAAUvB,KAAI,SAACW,GAyCX,OACI,kBAAC,EAAD,CACIT,IAAKS,EAAGR,GACRf,OAAQuB,EAAGR,GACX1B,MAAOkC,EAAGlC,MACVY,MAlBgB,SAAC0D,EAA6B1D,GAClD,OAAQsB,EAAGjB,QACP,IAAK,SACD,OAAOL,EAAMsB,EAAGR,IAAIT,QAAO,SAAAO,GAAC,OAAIA,EAAEI,UAEtC,IAAK,YACD,OAAOhB,EAAMsB,EAAGR,IAAIT,QAAO,SAAAO,GAAC,OAAKA,EAAEI,UAEvC,QACI,OAAOhB,EAAMsB,EAAGR,KASb6C,CAAkBrC,EAAItB,GAC7BC,WAAYA,EACZC,aAAcA,EACdC,WAAYA,EACZC,iBAAkBA,EAClBC,OAAQiB,EAAGjB,OACXC,eAAgBA,EAChBC,gBAAiBA,EACjBC,oBAAqBA,WC5OzDoD,IAASC,OAEL,kBAAC,EAAD,KACI,kBAACC,EAAD,OAGFC,SAASC,eAAe,SR6HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxH,GACLE,QAAQF,MAAMA,EAAMyH,c","file":"static/js/main.9503655d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component, ErrorInfo, ReactNode } from \"react\";\n\ninterface Props {\n    children?: ReactNode;\n}\n\ninterface State {\n    hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n    public state: State = {\n        hasError: false\n    };\n\n    //catch errors anywhere in child component tree:\n    public static getDerivedStateFromError(_: Error): State {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n    }\n\n    //show errors info:\n    componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n        console.log(\" Logging to external log service ...\", error, errorInfo);\n    }\n\n    public render() {\n        return this.state.hasError\n            ? <h1>Something went wrong</h1>\n            : this.props.children\n    }\n}\n\nexport {\n    ErrorBoundary\n}\n\n","import React, {useState} from \"react\";\nimport {Button, TextField, IconButton} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n//types:\ntype AddItemFormPropTypes = {\n    addItemHandler: (title: string) => void\n}\n\nconst AddItemForm: React.FC<AddItemFormPropTypes> = (props)=>{\n    const {\n        addItemHandler,\n    } = props;\n\n    const [error, setError] = useState<boolean>(false);\n    const [newValue, setNewValue] = useState(\"\");\n    /*const hasError = error ? \"error\" : \"\";*/\n    const hasError = error ? \"title is required\" : \"\";\n    const onchangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setNewValue(e.currentTarget?.value);\n    }\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        setError(false);\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    const addItem = () => {\n        if (!newValue.trim()) {\n            setError(true);\n            return;\n        }\n        addItemHandler(newValue.trim());\n        setNewValue('');\n    }\n\n    return (\n        <div>\n            {/*<input value={newValue}\n                   onChange={onchangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   className={hasError}\n            />*/}\n            <TextField\n                variant=\"outlined\"\n                value={newValue}\n                label=\"Title\"\n                onChange={onchangeHandler}\n                onKeyPress={onKeyPressHandler}\n                error={!!hasError}\n                helperText={hasError}\n            />\n            {/*<button onClick={addItem}>+</button>*/}\n            <IconButton\n                color=\"primary\"\n                style={{maxWidth: '30px', maxHeight: '30px', minWidth: '30px', minHeight: '30px'}}\n                onClick={addItem}\n            ><AddBox/></IconButton>\n            {/*{error && <div className={\"error-message\"}>title is required</div>}*/}\n        </div>\n    )\n}\n\nexport {\n    AddItemForm\n}","import React, {useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    onChangeHandler: (newTitle: string) => void\n}\n\nconst EditableSpan: React.FC<EditableSpanPropsType> = (props) => {\n    const {\n        title,\n        onChangeHandler,\n    } = props;\n    const [editMode, setEditMode] = useState<boolean>(false);\n    const [titleValue, setTitleValue] = useState(\"\");\n    const onEditMode = () => {\n        setEditMode(true);\n        setTitleValue(title);\n    }\n    const offEditMode = () => {\n        setEditMode(false);\n        onChangeHandler(titleValue);\n\n    }\n    const onTitleHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setTitleValue(e.currentTarget.value);\n    }\n\n    return (\n        <>\n            {\n                editMode\n                    ? /*<input\n                        type=\"text\"\n                        value={titleValue}\n                        autoFocus\n                        onBlur={offEditMode}\n                        onChange={onTitleHandler}\n                    />*/\n                    <TextField\n                        type=\"text\"\n                        value={titleValue}\n                        autoFocus\n                        onBlur={offEditMode}\n                        onChange={onTitleHandler}\n                    />\n                    : <span\n                        onDoubleClick={onEditMode}\n                    >{title}</span>\n            }\n        </>\n    );\n}\n\nexport {\n    EditableSpan\n}","import React from \"react\";\nimport {FilterValuesType} from \"./App\";\nimport {AddItemForm} from \"./AddItemForm\";\nimport {EditableSpan} from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\nexport type TaskType = {\n    title: string\n    isDone: boolean\n    id: string\n}\ntype TodolistPropsType = {\n    todoId: string\n    title: string\n    tasks: Array<TaskType>\n    deleteTask: (taskId: string, todoId: string) => void\n    changeFilter: (value: FilterValuesType, todoId: string) => void\n    createTask: (title: string, todoId: string) => void\n    changeTaskStatus: (taskId: string, isDone: boolean, todoId: string) => void\n    filter: FilterValuesType\n    removeTodolist: (todoId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todoId: string) => void\n    changeTodoListTitle: (todoId: string, newTitle: string) => void\n}\n\nconst Todolist: React.FC<TodolistPropsType> = (props) => {\n    const {\n        todoId,\n        title,\n        tasks,\n        deleteTask,\n        changeFilter,\n        createTask,\n        changeTaskStatus,\n        filter,\n        removeTodolist,\n        changeTaskTitle,\n        changeTodoListTitle,\n    } = props;\n\n    const removeTodo = () => {\n        removeTodolist(todoId);\n    }\n    const changeTodoTitle = (newTitle: string) => {\n        changeTodoListTitle(todoId, newTitle);\n    }\n    const onAllClickHandler = () => changeFilter(\"All\", todoId);\n    const onActiveClickHandler = () => changeFilter(\"Active\", todoId);\n    const onCompletedClickHandler = () => changeFilter(\"Completed\", todoId);\n    //fnc for adding task for todolist used todoId and addItemForm\n    const addTask = (title: string) => {\n        createTask(title, todoId); //todoId from props\n    }\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan onChangeHandler={changeTodoTitle} title={title}/>\n                {/*<button onClick={removeTodo}>X</button>*/}\n                <IconButton\n                    onClick={removeTodo}\n                ><Delete/></IconButton>\n            </h3>\n            <AddItemForm addItemHandler={addTask}/>\n            <ul>\n                {\n                    tasks.map(t => {\n                        const onRemoveHandler = () => {\n                            deleteTask(t.id, todoId);\n                        }\n                        const changeTaskStatusHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n                            //console.log(`change status ${t.id}`);\n                            //currentTarget set value its want to change:\n                            changeTaskStatus(t.id, e.currentTarget.checked, todoId);\n                        }\n                        const onChangeTaskTitleHandler = (newTitle: string) => {\n                            changeTaskTitle(t.id, newTitle, todoId)\n                        }\n                        //task:\n                        return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\n                            {/*<input type=\"checkbox\"\n                                   checked={t.isDone}\n                                   onChange={changeTaskStatusHandler}\n                            />*/}\n                            <Checkbox\n                                color=\"secondary\"\n                                checked={t.isDone}\n                                onChange={changeTaskStatusHandler}\n                            />\n                            {/*<span>{t.title}</span>*/}\n                            <EditableSpan title={t.title} onChangeHandler={onChangeTaskTitleHandler}/>\n                            {/*<button onClick={onRemoveHandler}>X</button>*/}\n                            <IconButton\n                                onClick={onRemoveHandler}\n                            ><Delete/></IconButton>\n                        </div>\n\n                    })\n                }\n            </ul>\n            <div>\n                {/*<button onClick={onAllClickHandler}\n                        className={filter === \"All\" ? \"active-filter\" : \"\"}\n                >All</button>\n                <button onClick={onActiveClickHandler}\n                        className={filter === \"Active\" ? \"active-filter\" : \"\"}\n                >Active</button>\n                <button onClick={onCompletedClickHandler}\n                        className={filter === \"Completed\" ? \"active-filter\" : \"\"}\n                >Completed</button>*/}\n\n                <Button\n                    color=\"inherit\"\n                    onClick={onAllClickHandler}\n                    variant={filter === \"All\" ? \"contained\" : \"text\"}\n                >All</Button>\n                <Button\n                    color=\"primary\"\n                    onClick={onActiveClickHandler}\n                    variant={filter === \"Active\" ? \"contained\" : \"text\"}\n                >Active</Button>\n                <Button\n                    color=\"secondary\"\n                    onClick={onCompletedClickHandler}\n                    variant={filter === \"Completed\" ? \"contained\" : \"text\"}\n                >Completed</Button>\n            </div>\n        </div>\n    );\n}\n\nexport {\n    Todolist\n}","import {v1} from \"uuid\";\r\n\r\nimport {FilterValuesType, TodolistStateType} from \"../App\";\r\n\r\nexport type TodoReducerAT = ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodoAC>\r\n    | ReturnType<typeof changeTodoFilterAC>\r\n    | ReturnType<typeof changeTodoTitleAC>\r\n\r\n\r\n\r\nexport const todolistsReducer = (state: Array<TodolistStateType>, action: TodoReducerAT): Array<TodolistStateType> => {\r\n    switch (action.type) {\r\n        case \"TL/TODOLIST/REMOVE_TODOLIST\": {\r\n            let stateCopy = [...state];\r\n            return stateCopy.filter(tl => tl.id !== action.todoId);\r\n        }\r\n        case \"TL/TODOLIST/ADD_TODOLIST\": {\r\n            let stateCopy = [...state];\r\n            return [{id: action.todoId, title: action.title, filter: \"All\"}, ...stateCopy];\r\n        }\r\n        case \"TL/TODOLIST/CHANGE_TODO_FILTER\": {\r\n            return state.map(tl => tl.id !== action.todoId ? tl : {...tl, filter: action.filter});\r\n        }\r\n        case \"TL/TODOLIST/CHANGE_TODO_TITLE\":{\r\n            return state.map(tl=> tl.id !== action.todoId ? tl : {...tl, title: action.title});\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todoId: string) => {\r\n    return {type: \"TL/TODOLIST/REMOVE_TODOLIST\", todoId} as const\r\n}\r\nexport const addTodoAC = (title: string) => {\r\n    return {type: \"TL/TODOLIST/ADD_TODOLIST\", title, todoId: v1()} as const\r\n}\r\nexport const changeTodoFilterAC = (todoId: string, filter: FilterValuesType) => {\r\n    return {type: \"TL/TODOLIST/CHANGE_TODO_FILTER\", todoId, filter} as const\r\n}\r\nexport const changeTodoTitleAC = (todoId: string, title: string) => {\r\n    return {type: \"TL/TODOLIST/CHANGE_TODO_TITLE\", todoId, title} as const\r\n}","import {TasksStateType} from \"../App\";\r\nimport {TaskType} from \"../TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport {addTodoAC, removeTodolistAC} from \"./todolistsReducer\";\r\n\r\ntype actionType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof addTodoAC> //from todolist\r\n    | ReturnType<typeof removeTodolistAC> //from todolist\r\n\r\nexport const tasksReducer = (state: TasksStateType, action: actionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case \"TL/TASKS/REMOVE_TASK\": {\r\n            /*const stateCopy = {...state};\r\n            const foundTasks = state[action.todoId];\r\n            const filteredTasks = foundTasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todoId] = filteredTasks;\r\n            return stateCopy;*/\r\n            return {\r\n                ...state,\r\n                [action.todoId]: state[action.todoId].filter(t => t.id !== action.taskId)\r\n            }\r\n        }\r\n        case \"TL/TASKS/ADD_TASK\": {\r\n            const newTask: TaskType = {id: v1(), title: action.title, isDone: false};\r\n            /*const stateCopy = {...state};\r\n            const foundTask = stateCopy[action.todoId];\r\n            const newTaskData = [newTask, ...foundTask];\r\n            stateCopy[action.todoId] = newTaskData;\r\n            return stateCopy;*/\r\n            return {\r\n                ...state,\r\n                [action.todoId]: [newTask, ...state[action.todoId]]\r\n            }\r\n        }\r\n        case \"TL/TASKS/CHANGE_TASK_STATUS\": {\r\n            const stateCopy = {...state};\r\n            const foundTasks = stateCopy[action.todoId];\r\n            const foundTask = foundTasks.find(t => t.id === action.taskId);\r\n            if (foundTask) {\r\n                foundTask.isDone = action.isDone;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"TL/TASKS/CHANGE_TASK_TITTLE\": {\r\n            const stateCopy = {...state};\r\n            const foundTasks = stateCopy[action.todoId];\r\n            const foundTask = foundTasks.find(t => t.id === action.taskId);\r\n            if (foundTask) {\r\n                foundTask.title = action.title;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case \"TL/TODOLIST/ADD_TODOLIST\": {\r\n            /*const stateCopy = {...state};\r\n            stateCopy[action.todoId] = [];\r\n            return stateCopy;*/\r\n            return {\r\n                ...state,\r\n\r\n                [action.todoId]: []\r\n\r\n            }\r\n        }\r\n        case \"TL/TODOLIST/REMOVE_TODOLIST\":{\r\n            const stateCopy = {...state};\r\n            delete stateCopy[action.todoId];\r\n            return stateCopy;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todoId: string) => {\r\n    return {type: \"TL/TASKS/REMOVE_TASK\", taskId, todoId} as const\r\n}\r\nexport const addTaskAC = (title: string, todoId: string) => {\r\n    return {type: \"TL/TASKS/ADD_TASK\", title, todoId} as const\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todoId: string) => {\r\n    return {type: \"TL/TASKS/CHANGE_TASK_STATUS\", taskId, isDone, todoId} as const\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todoId: string) => {\r\n    return {type: \"TL/TASKS/CHANGE_TASK_TITTLE\", taskId, title, todoId} as const\r\n}","import React, {useReducer} from 'react';\nimport {v1} from \"uuid\";\nimport {AppBar,\n    Button,\n    Container,\n    Grid,\n    IconButton,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\n\nimport './App.css';\nimport {AddItemForm} from \"./AddItemForm\";\nimport {TaskType, Todolist} from \"./TodoList\";\nimport {Menu} from '@material-ui/icons';\nimport {\n    addTodoAC,\n    changeTodoFilterAC,\n    changeTodoTitleAC,\n    removeTodolistAC,\n    todolistsReducer\n} from \"./state/todolistsReducer\";\nimport {addTaskAC,\n    changeTaskStatusAC,\n    changeTaskTitleAC,\n    removeTaskAC,\n    tasksReducer\n} from \"./state/tasksReducer\";\n\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\"\nexport type TodolistStateType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n    const TodoListId_1 = v1();\n    const TodoListId_2 = v1();\n\n    const [todosData, dispatchTodo] = useReducer(todolistsReducer, [\n        {id: TodoListId_1, title: \"what to learn\", filter: \"All\"},\n        {id: TodoListId_2, title: \"what to bye\", filter: \"All\"},\n    ]);\n\n    const [tasks, dispatchTasks] = useReducer(tasksReducer, {\n        [TodoListId_1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"React\", isDone: false},\n        ],\n        [TodoListId_2]: [\n            {id: v1(), title: \"Milk\", isDone: true},\n            {id: v1(), title: \"Bread\", isDone: true},\n            {id: v1(), title: \"Coffee\", isDone: false},\n        ],\n    });\n\n    //tasks callBacks:\n    const deleteTask = (taskId: string, todoId: string) => {\n        /*//find tasks used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId];\n        //remove task from all tasks:\n        let filteredTasks = foundTasks.filter(t => t.id !== taskId);\n        //rewrite new tasksData for todolist:\n        tasks[todoId] = filteredTasks;\n        //rerender all TasksData:\n        //setTasks({...tasks});*/\n        const action = removeTaskAC(taskId, todoId);\n        dispatchTasks(action);\n    };\n    const createTask = (title: string, todoId: string) => {\n        /*//create new task:\n        let newTask = {id: v1(), title, isDone: false};\n        //find tasks used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId];\n        //rewrite new tasksData for todolist:\n        let newTasksData = ([newTask, ...foundTasks]);\n        tasks[todoId] = newTasksData;\n        //rerender all TasksData:\n        setTasks({newTasksData, ...tasks});*/\n        const action = addTaskAC(title, todoId);\n        dispatchTasks(action);\n    };\n    const changeFilter = (value: FilterValuesType, todoId: string) => {\n        /*//find todolist used todoId from onClickHandler:\n        let todo = todosData.find(tl => tl.id === todoId);\n        //if todolist exists rewrite filter value and rerender all TodosData:\n        if (todo) {\n            todo.filter = value;\n            //setTodosData([...todosData]);\n        }*/\n        const action = changeTodoFilterAC(todoId, value);\n        dispatchTodo(action);\n    };\n    const changeTaskStatus = (taskId: string, isDone: boolean, todoId: string) => {\n        /*//find taskS used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId]\n        //find TASK from foundTasks used taskId from onClickHandler:\n        let foundTask = foundTasks.find(t => t.id === taskId);\n        //if task exists rewrite isDone value and rerender all TasksData:\n        if (foundTask) {\n            foundTask.isDone = isDone;\n            setTasks({...tasks})\n        }*/\n        const action = changeTaskStatusAC(taskId, isDone, todoId);\n        dispatchTasks(action);\n    };\n    const changeTaskTitle = (taskId: string, newTitle: string, todoId: string) => {\n        /*//find taskS used TodoId from onClickHandler:\n        let foundTasks = tasks[todoId];\n        //find TASK from foundTasks used taskId from onClickHandler:\n        let foundTask = foundTasks.find(t => t.id === taskId);\n        //if task exists rewrite title value and rerender all TasksData:\n        if (foundTask) {\n            foundTask.title = newTitle;\n            setTasks({...tasks})\n        }*/\n        const action = changeTaskTitleAC(taskId, newTitle, todoId);\n        dispatchTasks(action);\n    }\n\n\n    //todoLists callBacks:\n    const removeTodolist = (todoId: string) => {\n        /*//remove todolist used todoId:\n        let filteredTodo = todosData.filter(tl => tl.id !== todoId);\n        //rewrite all todoData and delete taskData of this todolist:\n        setTodosData(filteredTodo);\n        delete tasks[todoId];\n        //rerender all tasksData:\n        setTasks({...tasks});*/\n        const action = removeTodolistAC(todoId);\n        dispatchTasks(action);\n        dispatchTodo(action);\n    }\n    const createTodolist = (title: string) => {\n        /*//create new todolist:\n        let newTodo: TodolistStateType = {id: v1(), title, filter: \"All\"};\n        //rerender all todoData with new todolist:\n        setTodosData([newTodo, ...todosData]);\n        //rerender all todoData with new tasks of this todolist:\n        setTasks({\n            ...tasks,\n            [newTodo.id]: []\n        });*/\n        const action = addTodoAC(title);\n        dispatchTasks(action);\n        dispatchTodo(action);\n    }\n    const changeTodoListTitle = (todoId: string, newTitle: string) => {\n       /* //found todolist used todoId:\n        let filteredTodo = todosData.find(t => t.id === todoId);\n        //filteredTodo = isUndefined, if todolist exist rewrite title and rerender all todosData:\n        if (filteredTodo) {\n            filteredTodo.title = newTitle;\n            setTodosData([...todosData]);\n        }*/\n        const action = changeTodoTitleAC(newTitle, todoId);\n        dispatchTodo(action);\n    }\n\n    return (\n        <div className=\"App\">\n\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px\"}}>\n                    {/*AddItemForm: */}\n                    <AddItemForm addItemHandler={createTodolist}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {/*App: */}\n                    {\n                        todosData.map((tl) => {\n\n                            //filtered tasks for todolist:\n\n                            //#1:\n                            /*let tasksForTodo = tasks[tl.id];\n                            if (tl.filter === \"Active\") {\n                                tasksForTodo = tasks[tl.id].filter(t => !t.isDone);\n                            }\n                            if (tl.filter === \"Completed\") {\n                                tasksForTodo = tasks[tl.id].filter(t => t.isDone);\n                            }*/\n\n                            //#2:\n                            /*let tasksForTodo = (): Array<TaskType> => {\n                                switch (tl.filter) {\n                                    case \"Active\": {\n                                        return tasks[tl.id].filter(t => t.isDone);\n                                    }\n                                    case \"Completed\": {\n                                        return tasks[tl.id].filter(t => !t.isDone);\n                                    }\n                                    default:\n                                        return tasks[tl.id];\n                                }\n                            }*/\n\n                            //#3(clear function):\n                            let getTasksForRender = (todoList: TodolistStateType, tasks: TasksStateType): Array<TaskType> => {\n                                switch (tl.filter) {\n                                    case \"Active\": {\n                                        return tasks[tl.id].filter(t => t.isDone);\n                                    }\n                                    case \"Completed\": {\n                                        return tasks[tl.id].filter(t => !t.isDone);\n                                    }\n                                    default:\n                                        return tasks[tl.id];\n                                }\n                            };\n\n                            return (\n                                <Todolist\n                                    key={tl.id}\n                                    todoId={tl.id}\n                                    title={tl.title}\n                                    tasks={getTasksForRender(tl, tasks)}\n                                    deleteTask={deleteTask}\n                                    changeFilter={changeFilter}\n                                    createTask={createTask}\n                                    changeTaskStatus={changeTaskStatus}\n                                    filter={tl.filter}\n                                    removeTodolist={removeTodolist}\n                                    changeTaskTitle={changeTaskTitle}\n                                    changeTodoListTitle={changeTodoListTitle}\n                                />\n                            )\n                        })\n                    }\n                </Grid>\n            </Container>\n\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {ErrorBoundary} from './ErrorBoundary';\nimport AppWithReducers from \"./AppWithReducers\";\n\n\nReactDOM.render(\n    //@ts-ignore\n    <ErrorBoundary>\n        <AppWithReducers/>\n        {/*{console.log()}*/}\n    </ErrorBoundary>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}