{"version":3,"sources":["AddItemForm.tsx","EdittableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","inputValue","setInputValue","addItem","addTask","value","onChange","e","currentTarget","onKeyPress","key","onClick","EdittableSpan","editMode","setEditMode","title","setTitle","changeEditMode","onChangeTitle","onBlur","autoFocus","onDoubleClick","TodoList","className","removeTodolist","todoListID","tittle","tasks","map","t","type","checked","isDone","changeIsDoneValue","id","newTitle","removeTask","setFilterValue","App","TaskId","deletedTask","tasksDataObj","filter","setTasksData","task","newTask","v1","newTodolistValue","todoLists","find","tl","setTodoList","IsDoneValue","changedValue","deletedTodolist","TodoListId_1","TodoListId_2","newTodolist","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c3e97c8.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\n\r\ntype AddItemFormType = {\r\n    addTask: (inputValue: string) => void\r\n\r\n}\r\nconst AddItemForm: React.FC<AddItemFormType> = (props) => {\r\n    let [inputValue, setInputValue] = useState('')\r\n    const addItem = () => {\r\n        if (inputValue) {\r\n            props.addTask(inputValue)\r\n            setInputValue('')\r\n        }\r\n    }\r\n    const onkeypressHandler = (e: React.KeyboardEvent) => {\r\n        if (e.key === 'Enter') {\r\n            addItem()\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value)\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input\r\n                    value={inputValue}\r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={onkeypressHandler}\r\n                />\r\n                <button onClick={addItem}>+</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    AddItemForm\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\n\r\n\r\ntype EdittableSpanType = {\r\n    title: string\r\n    onChangeTitle: (title: string)=> void\r\n\r\n}\r\n\r\nconst EdittableSpan: React.FC<EdittableSpanType> = (props)=> {\r\n    const[editMode, setEditMode] = useState(false);\r\n    const[title, setTitle] = useState(\"\");\r\n\r\n    /*const onEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.title);\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false);\r\n        props.onChangeTitle(title);\r\n    }*/\r\n\r\n    const changeEditMode = (value: boolean) => {\r\n        setEditMode(value);\r\n        if (value) {\r\n            setTitle(props.title);\r\n        } else {\r\n            props.onChangeTitle(title);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n    const onKeyHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            changeEditMode(false);\r\n        }\r\n    }\r\n    return(\r\n        <>\r\n            {\r\n                editMode\r\n                ? <input\r\n                        value={title}\r\n                        onChange={onChangeHandler}\r\n                        onBlur={()=>changeEditMode(false)}\r\n                        onKeyPress={onKeyHandler}\r\n                        autoFocus>\r\n                    </input>\r\n                : <span onDoubleClick={()=>changeEditMode(true)} >{props.title}</span>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport {\r\n    EdittableSpan\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {FilterType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EdittableSpan} from \"./EdittableSpan\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListPropsType = {\r\n    tasks: Array<TaskType>\r\n    removeTask: (TaskId: string, todoListID: string) => void\r\n    addTask: (title: string, todoListID: string) => void\r\n    setFilterValue: (value: FilterType, todoListID: string) => void\r\n    changeIsDoneValue: (TaskId: string, IsDoneValue: boolean, todoListID: string) => void\r\n    todoListID: string\r\n    filter: FilterType //??\r\n    title: string\r\n    removeTodolist: (todoListID: string) => void\r\n\r\n    onChangeTitle: (TaskId: string, newTitle: string, todoListID: string)=> void\r\n}\r\n\r\nconst TodoList: React.FC<TodoListPropsType> = (props) => {\r\n\r\n    const removeTodolist = () => props.removeTodolist(props.todoListID);\r\n\r\n\r\n    const addTask = (tittle: string) => {\r\n        props.addTask(tittle, props.todoListID)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"App\">\r\n                <div>\r\n                    <h3>{props.title}\r\n                        <button onClick={removeTodolist}\r\n                        >X\r\n                        </button>\r\n                    </h3>\r\n\r\n\r\n                    <AddItemForm addTask={addTask}/>\r\n\r\n\r\n                    <ul>\r\n                        {props.tasks.map(t => {\r\n\r\n                                const onclickHandler = () => props.removeTask(t.id, props.todoListID)\r\n                                const onChangeIsDoneHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                    props.changeIsDoneValue(t.id, e.currentTarget.checked, props.todoListID)\r\n                                }\r\n\r\n\r\n                                const onChangeTitle = (newTitle: string) => {\r\n                                   props.onChangeTitle(t.id, newTitle, props.todoListID)\r\n                                }\r\n\r\n\r\n                                return (\r\n                                    <li><input\r\n\r\n                                        type=\"checkbox\"\r\n                                        checked={t.isDone}\r\n                                        onChange={onChangeIsDoneHandler}\r\n                                    />\r\n                                        <EdittableSpan title={t.title} onChangeTitle={onChangeTitle}/>\r\n                                        <button onClick={onclickHandler}>X</button>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        )\r\n                        }\r\n\r\n\r\n                    </ul>\r\n                    <div>\r\n                        <button onClick={() => {\r\n                            props.setFilterValue(\"All\", props.todoListID)\r\n                        }}>All\r\n                        </button>\r\n                        <button onClick={() => {\r\n                            props.setFilterValue(\"Active\", props.todoListID)\r\n                        }}>Active\r\n                        </button>\r\n                        <button onClick={() => {\r\n                            props.setFilterValue(\"Completed\", props.todoListID)\r\n                        }}>Completed\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {\r\n    TodoList\r\n}","import React, {useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport {TaskType, TodoList} from './TodoList';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type FilterType = \"All\" | \"Active\" | \"Completed\";\r\n\r\ntype TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterType\r\n}\r\ntype TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    /*let [filter,setFilter] = useState<FilterType>(\"All\")*/\r\n\r\n\r\n    const removeTask = (TaskId: string, todoListID: string) => {\r\n        let task = tasksDataObj[todoListID]\r\n        let deletedTask = task.filter(t => t.id !== TaskId)\r\n        tasksDataObj[todoListID] = deletedTask\r\n        setTasksData({...tasksDataObj})\r\n    }\r\n    const addTask = (title: string, todoListID: string) => {\r\n        let task = tasksDataObj[todoListID]\r\n        let newTask = {id: v1(), title, isDone: false}\r\n        tasksDataObj[todoListID] = [newTask, ...task]\r\n        setTasksData({...tasksDataObj})\r\n\r\n    }\r\n    const setFilterValue = (value: FilterType, todoListID: string) => {\r\n        let newTodolistValue = todoLists.find(tl => tl.id === todoListID)\r\n        if (newTodolistValue) {\r\n            newTodolistValue.filter = value\r\n            setTodoList([...todoLists])\r\n        }\r\n    }\r\n    const changeIsDoneValue = (TaskId: string, IsDoneValue: boolean, todoListID: string) => {\r\n        let task = tasksDataObj[todoListID]\r\n        let changedValue = task.find(t => t.id === TaskId)\r\n        if (changedValue) {\r\n            changedValue.isDone = IsDoneValue\r\n            setTasksData({...tasksDataObj})\r\n        }\r\n    }\r\n\r\n    const removeTodolist = (todoListID: string) => {\r\n        let deletedTodolist = todoLists.filter(t => t.id !== todoListID)\r\n        setTodoList(deletedTodolist)\r\n        delete tasksDataObj[todoListID]\r\n        setTasksData({...tasksDataObj})\r\n    }\r\n\r\n    const addTodolist = (title: string) => {\r\n        let newTodolist: TodoListsType = {id: v1(), title, filter: \"All\"}\r\n        setTodoList([newTodolist, ...todoLists])\r\n        setTasksData({\r\n            ...tasksDataObj,\r\n            [newTodolist.id]: []\r\n        })\r\n    }\r\n\r\n\r\n    const onChangeTitle = (TaskId: string, title: string, todoListID: string) => {\r\n        let task = tasksDataObj[todoListID]\r\n        let changedValue = task.find(t => t.id === TaskId)\r\n        if (changedValue) {\r\n            changedValue.title = title\r\n            setTasksData({...tasksDataObj})\r\n        }\r\n    }\r\n\r\n\r\n\r\n    let TodoListId_1 = v1();\r\n    let TodoListId_2 = v1();\r\n\r\n    let [todoLists, setTodoList] = useState<Array<TodoListsType>>([\r\n        {id: TodoListId_1, title: \"bla\", filter: \"All\"},\r\n        {id: TodoListId_2, title: \"bla2\", filter: \"Completed\"},\r\n    ]);\r\n\r\n\r\n    let [tasksDataObj, setTasksData] = useState<TasksStateType>({\r\n            [TodoListId_1]: [\r\n                {id: v1(), title: \"React\", isDone: false},\r\n                {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n                {id: v1(), title: \"JS\", isDone: true},\r\n            ],\r\n            [TodoListId_2]: [\r\n                {id: v1(), title: \"bla\", isDone: false},\r\n                {id: v1(), title: \"123\", isDone: true},\r\n                {id: v1(), title: \"hello\", isDone: true},\r\n            ],\r\n        }\r\n    )\r\n\r\n    return (\r\n\r\n        <div className={\"App\"}>\r\n            <AddItemForm addTask={addTodolist}/>\r\n            {\r\n                todoLists.map((tl) => {\r\n                    let tasksForTodoList = (): Array<TaskType> => {\r\n                        switch (tl.filter) {\r\n                            case \"Active\": {\r\n                                return tasksDataObj[tl.id].filter(t => t.isDone)\r\n                            }\r\n                            case \"Completed\": {\r\n                                return tasksDataObj[tl.id].filter(t => !t.isDone)\r\n                            }\r\n                            default:\r\n                                return tasksDataObj[tl.id]\r\n                        }\r\n                    }\r\n\r\n                    /*let tasksForTodoList = tasksDataObj[tl.id];\r\n                    if (tl.filter === \"Active\"){\r\n                        tasksForTodoList = tasksDataObj[tl.id].filter(t => t.isDone)\r\n                    }\r\n                    if (tl.filter === \"Completed\"){\r\n                        tasksForTodoList = tasksDataObj[tl.id].filter(t => !t.isDone)\r\n                    }*/\r\n                    return (\r\n                        <TodoList\r\n                            key={tl.id}\r\n                            title={tl.title}\r\n                            filter={tl.filter} //??\r\n                            todoListID={tl.id}\r\n                            addTask={addTask}\r\n                            removeTask={removeTask}\r\n                            tasks={tasksForTodoList()}\r\n                            setFilterValue={setFilterValue}\r\n                            changeIsDoneValue={changeIsDoneValue}\r\n                            removeTodolist={removeTodolist}\r\n                            onChangeTitle={onChangeTitle}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}